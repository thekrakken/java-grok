apply {
    plugin "base"
    plugin "java"
    plugin "maven"
    plugin "signing"
    plugin "checkstyle"
    plugin "jacoco"
    plugin "idea"
    plugin "eclipse"
}

task wrapper(type: Wrapper) {
  gradleVersion = '4.6'
}

repositories {
    mavenLocal()
    mavenCentral()
}

sourceCompatibility = JavaVersion.VERSION_1_8
group = "oi.krakens"
archivesBaseName = "java-grok"

ext {
    checkStyleToolVersion = "6.19"
    jacocoToolVersion = "0.7.9"

    commonsLang3Version = "3.7"

    junitVersion = "4.12"
    assertjVersion = "3.9.1"
    guavaVersion = "24.0-jre"
}

dependencies {
    compile "org.apache.commons:commons-lang3:$commonsLang3Version"

    testCompile "junit:junit:$junitVersion"
    testCompile "org.assertj:assertj-core:$assertjVersion"
    testCompile "com.google.guava:guava:$guavaVersion"
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: "anthony-corbacho", password: "lm:8pQ6{")
            }

            pom.project {
                name 'Java Grok'
                packaging 'jar'
                description 'Java Grok is simple API that allows you to easily parse logs and other files (single line). With Java Grok, you can turn unstructured log and event data into structured data (JSON).'
                url 'https://github.com/thekrakken/java-grok'

                scm {
                    connection 'scm:git:git@github.com:thekrakken/java-grok.git'
                    developerConnection 'scm:git:git@github.com:thekrakken/java-grok.git'
                    url 'scm:git:git@github.com:thekrakken/java-grok.git'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'anthony-corbacho'
                        name 'Anthony Corbacho'
                        email 'manfred@sonatype.com'
                    }
                }
            }
        }
    }
}

checkstyle {
    configFile = file("${project.projectDir}/extra/checkstyle/checkstyle.xml")
    toolVersion = "$checkStyleToolVersion"
}

checkstyleMain {
    source = 'src/main/java'
    doLast {
        project.ext.checkType = "main"
    }
}

jacoco {
    toolVersion = "$jacocoToolVersion"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
    }
}
